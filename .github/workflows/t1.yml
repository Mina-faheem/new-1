
name: final Trivy Full Scan with Prometheus

on:
  push:
    branches: [main]
  pull_request:

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create results directory
        run: mkdir -p trivy-results sbom

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.1
        with:
          trivy-version: '0.56.1'

      - name: Cache Trivy binary
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/trivy-bin
          key: trivy-binary-v0.56.1-Linux-X64

      - name: Trivy Filesystem Scan
        run: trivy fs --severity HIGH,CRITICAL --format json --output trivy-results/fs-scan.json .

      - name: Trivy Repository Scan
        run: trivy repo --format json --output trivy-results/repo-scan.json .

      - name: Trivy IaC Scan
        run: trivy config --format json --output trivy-results/iac-scan.json .

      - name: Trivy Secret Scan
        run: trivy fs --scanners secret --format json --output trivy-results/secret-scan.json .

      - name: Trivy SBOM Generation (CycloneDX)
        run: trivy fs --format cyclonedx --output sbom/sbom.json .

      - name: Convert Trivy JSON to Prometheus Metrics and Push (with Unique job label)
        run: |
          pip install requests
          python3 <<EOF
          import json, os, requests, time

          scan_dir = "trivy-results"
          scan_id = str(int(time.time()))  # Unique scan identifier
          pushgateway_base = f"http://0f1dcdfc471d.mylabserver.com:9091/metrics/job/trivy_scan_{scan_id}"

          def convert_to_prometheus_metrics(file_path, source_label):
              with open(file_path, 'r') as f:
                  try:
                      data = json.load(f)
                  except json.JSONDecodeError:
                      print(f"Skipping invalid JSON file: {file_path}")
                      return None

              metrics = []
              metrics.append("# HELP trivy_vulnerability_info Detailed vulnerability information")
              metrics.append("# TYPE trivy_vulnerability_info gauge")

              for result in data.get("Results", []):
                  target = result.get("Target", "unknown_target")
                  for vuln in result.get("Vulnerabilities", []):
                      vuln_id = vuln.get("VulnerabilityID", "unknown_id")
                      severity = vuln.get("Severity", "UNKNOWN")
